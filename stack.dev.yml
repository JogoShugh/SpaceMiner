version: "3.6"

services:

  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - "80:80"
    networks:
      - webnet
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  web:
    build:
      context: .
      dockerfile: docker/web.Dockerfile
      args:
        NODE_ENV: development
    environment:
      VIRTUAL_HOST: localhost
      API_URL: api.localhost
    entrypoint:
      - yarn
      - start:dev
    volumes:
      - .:/app
    depends_on:
      - api
      - nginx-proxy
    networks:
      - webnet
    ports:
      - "9000:80"
    deploy:
      replicas: 6
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 2
        delay: 10s
        order: start-first

  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
      args:
        NODE_ENV: development
    entrypoint:
      - yarn
      - start:dev
    volumes:
      - .:/app
    depends_on:
      - nginx-proxy
      - db
    networks:
      - webnet
      - backend
    ports:
      - "9001:80"
    environment:
      VIRTUAL_HOST: api.localhost
      DB_USERNAME: root
      DB_PASSWORD: example
      DB_URL: mongo
      DB_PORT: 27017
    deploy:
      replicas: 6
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 2
        delay: 10s
        order: start-first

  db:
    image: mongo
    networks:
      - backend
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - data-db:/data/db
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

networks:
  webnet:
  backend:

volumes:
  data-db:
